<!--

    Copyright 2007-2015, Kaazing Corporation. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<component>

  <dependencySets>

    <!-- Overlay Kaazing WebSocket Gateway Server Libraries that are Kaazing-generated.  We
         include them without the trailing version information. -->
    <dependencySet>
      <outputDirectory>lib</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.kaazing:gateway.server.api</include>
        <include>org.kaazing:gateway.server.spi</include>
        <include>org.kaazing:gateway.server</include>

        <!-- resource address jars -->
        <include>org.kaazing:gateway.resource.address</include>
        <include>org.kaazing:gateway.resource.address.http</include>
        <include>org.kaazing:gateway.resource.address.ws</include>
        <include>org.kaazing:gateway.resource.address.ssl</include>
        <include>org.kaazing:gateway.resource.address.tcp</include>
        <include>org.kaazing:gateway.resource.address.wsn</include>
        <include>org.kaazing:gateway.resource.address.httpxe</include>
        <include>org.kaazing:gateway.resource.address.wsdraft</include>
        <include>org.kaazing:gateway.resource.address.wsxdraft</include>
        <include>org.kaazing:gateway.resource.address.pipe</include>
        <include>org.kaazing:gateway.resource.address.sse</include>
        <include>org.kaazing:gateway.resource.address.wsx</include>
        <include>org.kaazing:gateway.resource.address.httpx</include>
        <include>org.kaazing:gateway.resource.address.httpxdraft</include>
        <include>org.kaazing:gateway.resource.address.rtmp</include>
        <include>org.kaazing:gateway.resource.address.udp</include>
        <include>org.kaazing:gateway.resource.address.wse</include>

        <!-- transport jars -->
        <include>org.kaazing:gateway.transport</include>
        <include>org.kaazing:gateway.transport.sse</include>
        <include>org.kaazing:gateway.transport.ssl</include>
        <include>org.kaazing:gateway.transport.http</include>
        <include>org.kaazing:gateway.transport.pipe</include>
        <include>org.kaazing:gateway.transport.nio</include>
        <include>org.kaazing:gateway.transport.bio</include>
        <include>org.kaazing:gateway.transport.ws</include>
        <include>org.kaazing:gateway.transport.wsn</include>
        <include>org.kaazing:gateway.transport.wseb</include>


        <!-- service jars -->
        <include>org.kaazing:gateway.service</include>
        <include>org.kaazing:gateway.service.echo</include>
        <include>org.kaazing:gateway.service.broadcast</include>
        <include>org.kaazing:gateway.service.proxy</include>
        <include>org.kaazing:gateway.service.http.balancer</include>
        <include>org.kaazing:gateway.service.http.directory</include>
        <include>org.kaazing:gateway.service.http.proxy</include>
        <include>org.kaazing:gateway.service.amqp</include>
        <include>org.kaazing:gateway.service.update.check</include>

        <!-- auth jars  -->
        <include>org.kaazing:gateway.security</include>
        <include>org.kaazing:gateway.util</include>

        <include>org.kaazing:gateway.bridge</include>
        <include>org.kaazing:gateway.management</include>
        <include>org.kaazing:gateway.service.update.check.management</include>
        <include>org.kaazing:mina.netty</include>
      </includes>
      <outputFileNameMapping>${artifact.artifactId}.${artifact.extension}</outputFileNameMapping>
    </dependencySet>

    <!-- Overlay Kaazing WebSocket Gateway Server Libraries that are not Kaazing-generated. -->
    <dependencySet>
      <outputDirectory>lib</outputDirectory>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>uk.co.real-logic:Agrona</include>
        <include>org.jdom:jdom</include>
        <include>org.slf4j:slf4j-api</include>
        <include>org.slf4j:slf4j-log4j12</include>
        <include>log4j:log4j</include>
        <include>org.kaazing:snmp4j</include>
        <include>org.kaazing:snmp4j-agent</include>
        <include>org.apache.xmlbeans:xmlbeans</include>
        <include>com.hazelcast:hazelcast</include>
        <include>com.hazelcast:hazelcast-client</include>
        <include>com.hazelcast:hazelcast-cloud</include>
        <include>commons-cli:commons-cli</include>
        <include>org.json:json</include>
        <include>org.apache.maven.shared:maven-shared-utils</include>
      </includes>
    </dependencySet>

    <!-- Overlay the truststore DB.  It is binary, and so does not change
         line endings as above. -->
    <dependencySet>
      <!-- Workaround for http://jira.codehaus.org/browse/MASSEMBLY-554 -->
      <outputDirectory>conf</outputDirectory>
      <outputFileNameMapping></outputFileNameMapping>
      <useProjectArtifact>false</useProjectArtifact>
      <includes>
        <include>org.kaazing:gateway.truststore</include>
      </includes>
      <unpack>true</unpack>
      <unpackOptions>
        <includes>
          <include>truststore.db</include>
        </includes>
        <filtered>false</filtered>
      </unpackOptions>
    </dependencySet>

  </dependencySets>

  <fileSets>
    <!-- Overlay NOTICE.txt -->
    <fileSet>
      <directory>..</directory>
      <outputDirectory>/</outputDirectory>
      <includes>
          <include>NOTICE.txt</include>
      </includes>
      <filtered>false</filtered>
    </fileSet>

    <!-- Overlay Kaazing WebSocket Gateway Keystore -->
    <fileSet>
      <directory>src/main/gateway</directory>
      <outputDirectory>/</outputDirectory>
      <includes>
          <include>conf/keystore.db</include>
      </includes>
      <filtered>false</filtered>
    </fileSet>

    <!-- Using dummy directory for log -->
    <fileSet>
      <outputDirectory>log</outputDirectory>
      <directory>src/main/gateway</directory>
      <excludes>
        <exclude>**/*</exclude>
      </excludes>
    </fileSet>

    <!-- Similar dummy directory for temp -->
    <fileSet>
      <outputDirectory>temp</outputDirectory>
      <directory>src/main/gateway</directory>
      <excludes>
        <exclude>**/*</exclude>
      </excludes>
    </fileSet>

    <!-- Overlay the SIGAR lib directory (not Kaazing-generated). As it contains a 
         number of native-code files from different architectures, put it in
         a subdirectory under lib -->
    <fileSet>
      <outputDirectory>lib/sigar</outputDirectory>
      <directory>target/sigar/sigar</directory>
      <excludes>
        <exclude>*.jar</exclude>  <!-- we get the sigar.jar here -->
      </excludes>
    </fileSet>

    <fileSet>
      <outputDirectory>lib</outputDirectory>
      <directory>target/sigar/sigar</directory>
      <includes>
        <include>*.jar</include>  <!-- we get sigar.jar elsewhere -->
      </includes>
    </fileSet>

    <!-- Overlay Command Center files from our bower download -->
    <fileSet>
      <outputDirectory>web/commandcenter</outputDirectory>
      <directory>target/bower-dependency/command-center/commandcenter</directory>
    </fileSet>

  </fileSets>

</component>
