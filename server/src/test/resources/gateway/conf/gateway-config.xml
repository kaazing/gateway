<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Copyright 2007-2016, Kaazing Corporation. All rights reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<gateway-config xmlns="http://xmlns.kaazing.com/gateway-config/excalibur">


    <!--
    #############################################################################
    #############################################################################
                  Kaazing WebSocket Gateway Configuration File

    This configuration file identifies all the possible services and associated
    security and management that flows through the Kaazing WebSocket Gateway.
    Refer to the section the section titled "Description of the
    gateway-config.xml Configuration Elements" in the Administrator's Guide
    for more information.
    #############################################################################
    #############################################################################
    -->

    <!--
    Echo service
    The echo service is a service that receives a string of characters
    through a WebSocket and returns the same characters to the sender.
    The service "echoes" any input. This service is primarily used
    for validating the basic Gateway configuration.
    The echo service runs a separate port to verify cross-origin access.
    -->

    <service>
        <accept>ws://10.0.2.2:8001/echo</accept>
        <accept>ws://localhost:8001/echo</accept>
        <accept>wss://localhost:9001/echo</accept>

        <type>echo</type>

        <!--
        You can set accept options at the service level or at the service defaults level.
        Setting options at the service level overrides options you set at the service
        defaults level.

        See the Service Defaults block of this configuration file for information on the
        accept options you can set.

        For example, you can set accept options for binding WebSocket (ws) and WebSocket
        secure (wss) to different ports on the Gateway host. You can only bind protocols for
        addresses present in the service's accept strings. If you try to bind a
        protocol for an address that does not exist in the service's accept strings,
        the bindings will have no effect.
        -->

        <!--
        <accept-options>
          <ws.bind>80</ws.bind>
          <wss.bind>443</wss.bind>
        </accept-options>
        -->

        <!--
        <auth-constraint>
          <require-role>AUTHORIZED</require-role>
        </auth-constraint>
        -->

        <cross-site-constraint>
            <allow-origin>http://localhost:8000</allow-origin>
        </cross-site-constraint>
        <cross-site-constraint>
            <allow-origin>https://localhost:9000</allow-origin>
        </cross-site-constraint>
    </service>

    <!--
    Directory service
    The directory service is a service that exposes a directory of files.
    It is used to host static files accessed via the embedded web server within
    the Kaazing WebSocket Gateway. For example, the Kaazing 'home' page and
    all of the Kaazing developer and administration documentation in the
    Gateway distribution are accessed through this service.

    The <directory> tag specifies the path of your static files relative
    to GATEWAY_HOME/web, where GATEWAY_HOME is the directory where you
    installed the Kaazing WebSocket Gateway.
    Note: An absolute path cannot be specified.
    -->

    <service>
        <accept>http://localhost:8000/</accept>
        <accept>https://localhost:9000/</accept>

        <type>directory</type>
        <properties>
            <directory>/public</directory>
            <welcome-file>index.html</welcome-file>
            <error-pages-directory>/error-pages</error-pages-directory>
            <options>indexes</options>
        </properties>

        <!--
        <auth-constraint>
          <require-role>AUTHORIZED</require-role>
        </auth-constraint>
        -->
    </service>

    <!-- For demos -->
    <service>
        <accept>http://localhost:8001/</accept>
        <accept>https://localhost:9001/</accept>

        <type>directory</type>
        <properties>
            <directory>/extras</directory>
            <welcome-file>index.html</welcome-file>
            <error-pages-directory>/error-pages</error-pages-directory>
            <options>indexes</options>
        </properties>

    </service>

    <!--
    #############################################################################
    #############################################################################
                         Session configuration
    #############################################################################
    #############################################################################
    -->

    <!--
    Session configuration
    This is the element that associates a session with one or more services by
    matching the domain of each service's accept URL.
    Refer to the Security Guide for more information.
    -->
    <session>
        <!-- associate service realms automatically -->
        <service-domain>localhost</service-domain>

        <!--
        Configure HTTP authentication: Basic and Negotiate are supported, with the
        Application variants - Application Basic and Application Negotiate.
        -->
        <authentication-scheme>Basic</authentication-scheme>
        <realm-name>demo</realm-name>

        <!-- Configure the session cookie -->
        <encryption-key-alias>session</encryption-key-alias>
        <inactivity-timeout>1800</inactivity-timeout>
    </session>


    <!--
    #############################################################################
    #############################################################################
                         Security configuration
    #############################################################################
    #############################################################################
    -->

    <!-- Security configuration -->
    <security>
        <!--
        The keystore element is used to configure the keystore that contains
        encryption keys for secure communications with Kaazing WebSocket Gateway.
        -->
        <keystore>
            <type>JCEKS</type>
            <file>keystore.db</file>
            <password-file>keystore.pw</password-file>
        </keystore>

        <!--
        The truststore element is used to configure the truststore that
        contains digital certificates for certificate authorities
        trusted by Kaazing WebSocket Gateway.
        -->
        <truststore>
            <file>truststore.db</file>
        </truststore>

        <!--
        This is the element that associates an authenticated user with a set
        of authorized roles.
        -->
        <realm>
            <name>demo</name>
            <description>Kaazing WebSocket Gateway Demo</description>

            <login-module>
                <type>file</type>
                <success>required</success>
                <options>
                    <file>jaas-config.xml</file>
                </options>
            </login-module>

            <!--
            The following is an example of an LDAP-based login-module element:
            -->
            <!--
            <login-module>
              <type>ldap</type>
              <success>required</success>
              <options>
                <userProvider>ldap://ldap-svr/ou=people,dc=example,dc=com</userProvider>
                <userFilter>(&amp;(uid={USERNAME})(objectClass=inetOrgPerson))</userFilter>
                <authzIdentity>{EMPLOYEENUMBER}</authzIdentity>
              </options>
            </login-module>
            -->

            <!--
            Kaazing WebSocket Gateway also supports a plugin mechanism for integration
            with custom authentication modules based on the Java LoginModule API.
            To use a custom authentication module, configure your login-module element
            as follows:
            -->
            <!--
            <login-module>
              <type>class:fully-qualified-class-name</type>
              <success>required</success>
              <options>
                .
                .
                .
              </options>
            </login-module>
            -->

        </realm>
    </security>


    <!--
    #############################################################################
    #############################################################################
         For a minimal configuration, remove everything below this line
         except for the closing gateway-config element.
    #############################################################################
    #############################################################################
    -->


    <!--
    #############################################################################
    #############################################################################
                       Removing Unnecessary Demo Services

    For your convenience, the demo bundle ships with a variety of demo services
    that are turned on by default. To reduce access to the Gateway, it is
    recommended that you remove any services that are not needed in deployment.
    You do this by removing or commenting out the service elements you no longer
    need in the file GATEWAY_HOME/conf/gateway-config.xml. For a minimal
    configuration (just the WebSocket echo and directory services), you can
    remove everything below this line except for the closing gateway-config
    element. When you restart the Gateway, you will see which services are running
    in the shell or command prompt that you used to start the Gateway.
    #############################################################################
    #############################################################################
    -->


    <!--
    #############################################################################
    #############################################################################
       Instructions for configuring the Gateway beyond the default localhost
    #############################################################################
    #############################################################################


    #############################################################################
    1. Accepting Connections at a Non-Localhost IP Address or Host Name
    #############################################################################
    By default, the Gateway is configured for "localhost" usage. If you wish to
    configure the Gateway for remote access, e.g., a remote browser connecting
    to a host server machine running the Gateway, you should replace all
    instances of "localhost" with the fully qualified host name of your host
    server machine.

    Kaazing WebSocket Gateway demo bundle services and the cross-origin sites
    allowed to access services on the Kaazing WebSocket Gateway demo bundle are,
    by default, configured to accept connections on localhost. If you want to
    accept connections on a non-localhost IP address or host name you must update
    your gateway configuration to accept connections at that IP address or fully
    qualified host name.

    In addition, you must specify the IP address or DNS name (using the fully
    qualified host name of the machine where the Gateway is installed) of the page
    from which a service is accessed in a cross-site constraint. Cross origin access
    to backend services is denied by default and cross-site constraints allow you
    to "white-list" the origin (an origin consists of a protocol scheme, a fully
    qualified host name, and a port number) of the cross-origin site that is
    allowed to access the service. Using Cross-Origin Resource Sharing therefore
    provides a way to explicitly and securely allow a cross-origin site access
    to a backend service.

    For the value of allow-origin, specify the value * if you want to allow
    access to all cross-site origin sites, including connections to gateway
    services from pages loaded from the file system rather than a web site.
    Specifying * may be for appropriate for services that restrict HTTP
    methods or custom headers, but not the origin of the request.

    You can also specify "allow-methods" and provide a comma-separated
    list of methods that can be invoked by the cross-origin site.
    For example: <allow-methods>POST,DELETE</allow-methods>.

    Additionally, you can also specify "allow-headers" and provide a
    comma-separated list of custom header names that can be sent by the
    cross-origin site when it accesses the service.
    For example, <allow-headers>X-Custom</allow-headers>.

    The following example shows a default Stomp service definition, using
    localhost.

      <service>
        <accept>ws://localhost:8000/activemq</accept>
        .
        .
        .
        <cross-site-constraint>
          <allow-origin>http://localhost:8000</allow-origin>
        </cross-site-constraint>
    </service>

    The following example shows how that service can be reconfigured to
    allow access to a backend service at the URL ws://www.example.com on
    port 8000 from the page http//www.example.com on port 80.

    <service>
        <accept>ws://www.example.com:8000/activemq</accept>
        .
        .
        .
        <cross-site-constraint>
          <allow-origin>http://www.example.com:80</allow-origin>
        </cross-site-constraint>
      </service>

    Alternatively, you can also use an IP address, as shown in the following
    example.

      <service>
        <accept>ws://192.0.2.1:8000/activemq</accept>
        .
        .
        .
        <cross-site-constraint>
          <allow-origin>http://192.0.2.1:80</allow-origin>
        </cross-site-constraint>
    </service>

    Note: Configure the service accept element to use the exact name that
    clients will use to access it. You can use multiple accept elements.


    #############################################################################
    2. Configuring Kaazing WebSocket Gateway on an Internal Network behind
    Firewalls, Load-Balancing Routers, or in the Cloud
    #############################################################################
    When a firewall or load-balancing router front-ends the Kaazing WebSocket
    Gateway, DNS resolves to the public IP address of that device.
    Administrators should configure this device to forward network requests
    to the Kaazing WebSocket Gateway located on the internal network.
    See the document "How to Configure Kaazing WebSocket Gateway on an Internal Network"
    for more information.


    #############################################################################
    3. Configuring a Web Server to Integrate with Kaazing WebSocket Gateway
    #############################################################################
    If you are hosting your web application on a separate web server, such as
    Apache HTTP Server or Microsoft IIS, then cross-origin access using
    HTML5 Cross Document Messaging (the PostMessage API) is required for those
    applications to connect to Kaazing WebSocket Gateway. Microsoft
    Internet Explorer versions 6 and 7 do not support communication across
    origins and require additional configuration on the web server.
    To configure this, perform the steps in the document
    "How to Configure a Web Server to Integrate with Kaazing WebSocket Gateway."


    #############################################################################
    4. Securing Kaazing WebSocket Gateway
    #############################################################################
    For more information, refer to the Security Guide.


    #############################################################################
    5. Upgrading Your License
    #############################################################################
    The developer's version of the Kaazing WebSocket Gateway demo bundle allows
    only a limited number of concurrent client connections.
    To upgrade your license, contact sales@kaazing.com.
    After you place a valid license key in GATEWAY_HOME/license, messages similar
    to the following example INFO messages display in your shell or command
    prompt at server startup:
    INFO  Checking license information
    INFO    Valid license found for: Joe User, Example Corporation,
            joe@example.com
    INFO    License expires on 06 Jun 2044
    INFO  Starting in licensed mode


    #############################################################################
    6. Debugging information
    #############################################################################
    Refer to the file GATEWAY_HOME/conf/log4j-config.xml to get additional debugging
    information while running the Gateway.


    #############################################################################
    #############################################################################
    -->


    <!--
    #############################################################################
    #############################################################################
                         Additional service configuration

    Note: Proxy services are designed to proxy connections to back-end service.
    #############################################################################
    #############################################################################
    -->

    <!--
    UDP broadcast service
    This type of service is used to broadcast information from a back-end
    service.

    Kaazing WebSocket Gateway supports Multicast. To configure a service
    that is running on Kaazing WebSocket Gateway to use a multicast address,
    you must specify the multicast URI in the accept property.
    See the document "How to Configure Kaazing WebSocket Gateway to Use Multicast"
    for more information.
    -->
    <service>
        <accept>sse://localhost:8000/sse</accept>
        <accept>sse+ssl://localhost:9000/sse</accept>

        <type>broadcast</type>
        <properties>
            <accept>udp://localhost:50505</accept>
        </properties>

        <!--
        <auth-constraint>
          <require-role>AUTHORIZED</require-role>
        </auth-constraint>
        -->

        <cross-site-constraint>
            <allow-origin>http://localhost:8000</allow-origin>
        </cross-site-constraint>
        <cross-site-constraint>
            <allow-origin>https://localhost:9000</allow-origin>
        </cross-site-constraint>
    </service>

    <!--
    Session service
    This type of service is used to prevent sessions from timing out.
    Refer to the Security Guide for more information.
    Note: Communication with the session service should be always be
    configured to use HTTPS.
    -->
    <service>
        <accept>http://localhost:8000/session</accept>
        <accept>https://localhost:9000/session</accept>

        <type>session</type>

        <!--
        <auth-constraint>
          <require-role>AUTHORIZED</require-role>
        </auth-constraint>
        -->
    </service>

    <!--
    #############################################################################
    #############################################################################
                               Service Defaults
    #############################################################################
    #############################################################################
    -->

    <!--
    The accept element in a service is frequently sufficient for the service to
    receive messages and requests. However, sometimes the value of the accept
    element does not match the physical description of the host. For example, the
    Gateway may be behind a load balancer or in a cloud environment, in which case
    its local network information may not match the settings specified by the
    accept element.

    For instance, your service may accept on ws://www.example.com but that
    hostname resolves to the IP address of the load balancer, not the Gateway
    host. In such a case, you can configure the Gateway using the {protocol}.bind
    element, which enables you to bind the address specified in the accept element
    to an internal address (where the address maps in your network). This option
    provides a choice of binding the address to a specific port or hostname and
    port (if you specify a hostname here, you must specify a port).

    See the document "How to Configure Kaazing WebSocket Gateway on an Internal Network"
    for more information.

    You can configure default values that apply to all services. Elements and
    values you specify in individual services override the defaults you specify
    in this section. The following list shows the service configurations
    you can specify in this section:

      * Accept Options

        - SSL Encryption
          The SSL encryption can be in one of two forms:

            <ssl.encryption>enabled</ssl.encryption>
          or
            <ssl.encryption>disabled</ssl.encryption>

          The default is <ssl.encryption>enabled</ssl.encryption> so does not need to be
          explicitly set if there is no ssl.encryption specified.

        - Protocol binds
          These are in the form:

          <{protocol}.bind>[hostname:]port</{protocol}.bind>

          {protocol} is one of ws, wss, http, https, ssl, or tcp. In the value,
          hostname is optional, but port is required. If a hostname (or IP
          address) is not specified, then the Gateway will bind to the wildcard
          address (0.0.0.0) using the given port. Binding to the wildcard address
          means the Gateway will listen on all interfaces of the host.

          If there are multiple accepts on a service, each using different
          protocols, then each protocol that needs to be bound must be explicitly
          bound. For example:

          <service>
            <accept>http://192.168.10.25:8000/echo</accept>
            <accept>ws://192.168.10.25:8001/echo</accept>
            <accept-options>
              <http.bind>80</http.bind>
              <ws.bind>443</ws.bind>
            </accept-options>
          </service>

        - Maximum WebSocket message size
          By default, the maximum size of data permitted in an incoming WebSocket
          frame is 128 kilobytes. You can change the maximum incoming data size over
          ws and wss by setting the following accept-option (see the Administrator's Guide
          for more information):

          <ws.maximum.message.size>64k</ws.maximum.message.size>

        - HTTP(S) keep-alive timeout
          This is the number of seconds the Gateway will wait for a subsequent request
          on an HTTP or HTTPS connection before closing the connection to conserve
          resources. The default value is 30 seconds. You can change this value by setting
          the following accept-option (see the Administrator's Guide for more information):

          <http.keepalive.timeout>120</http.keepalive.timeout>

        An example for setting service defaults (turning SSL encryption off, binding each
        protocol, reducing the limit for incoming WebSocket frame size and increasing the
        timeout for HTTP connections) is as follows. Note that in this example both ws
        and http are bound to port 80. This works because they are compatible protocols.
        Similarly, wss and https can both be bound to the same port because they are
        compatible protocols. However, if you try to bind incompatible protocols to the
        same port, you will receive a port conflict error on Gateway startup. For instance,
        you cannot bind ws and https to the same port.

        <service-defaults>
          <accept-options>
            <ssl.encryption>disabled</ssl.encryption>
            <ws.bind>80</ws.bind>
            <wss.bind>192.168.10.25:443</wss.bind>
            <http.bind>192.168.10.25:80</http.bind>
            <https.bind>192.168.10.25:443</https.bind>
            <tcp.bind>192.168.10.25:8075</tcp.bind>
            <ws.maximum.message.size>32k</ws.maximum.message.size>
            <http.keepalive.timeout>60</http.keepalive.timeout>
          </accept-options>
        </service-defaults>

      * MIME-type Mappings

        A service can return files of various types to a client. Generally, HTTP
        mandates that a response containing a file also specify a Content-Type
        header describing the file contents. You may use a <mime-mapping> tag to specify
        the Content-Type value to be returned for files with a particular name extension.
        For example,

        <mime-mapping>
          <extension>png</extension>
          <mime-type>image/png</mime-type>
        </mime-mapping>
        <mime-mapping>
          <extension>html</extension>
          <mime-type>text/html</mime-type>
        </mime-mapping>

        indicates that for files with names ending in '.png', the header
        'Content-Type: image/png' should be returned by the Gateway, and 'Content-Type: text/html'
        should be returned for .html files. Mappings can be specified in the both the
        <service-defaults> block and in any <service> blocks. If a mapping for a given extension
        is specified in both the <service-defaults> block and a <service> block, the <service>-level
        mapping will be used when providing files from that service.

        An initial set of mappings is provided in <service-defaults> below, and should be edited
        as needed, but not removed. If specified in <service-defaults>, all <mime-mapping> blocks
        must come after any <accept-options>. If specified in <service>, all <mime-mapping> blocks
        must come just before any <cross-site-constraint> blocks.
    -->
    <service-defaults>
        <mime-mapping>
            <extension>html</extension>
            <mime-type>text/html</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>htm</extension>
            <mime-type>text/html</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>js</extension>
            <mime-type>text/javascript</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>png</extension>
            <mime-type>image/png</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>gif</extension>
            <mime-type>image/gif</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>jpg</extension>
            <mime-type>image/jpeg</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>jpeg</extension>
            <mime-type>image/jpeg</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>css</extension>
            <mime-type>text/css</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>swf</extension>
            <mime-type>application/x-shockwave-flash</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>xap</extension>
            <mime-type>application/x-silverlight-app</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>htc</extension>
            <mime-type>text/x-component</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>jnlp</extension>
            <mime-type>application/x-java-jnlp-file</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>manifest</extension>
            <mime-type>text/cache-manifest</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>appcache</extension>
            <mime-type>text/cache-manifest</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>vtt</extension>
            <mime-type>text/vtt</mime-type>
        </mime-mapping>
        <mime-mapping>
            <extension>aspx</extension>
            <mime-type>text/html</mime-type>
        </mime-mapping>
    </service-defaults>

    <!--
    #############################################################################
    #############################################################################
                         Management configuration
    #############################################################################
    #############################################################################
    -->

    <!--
    Gateway management configuration
    Refer to the Security Guide and the document "How to Manage the Kaazing WebSocket
    Gateway" for more information.
    -->
    <management>
        <!-- specify protocol, network interface (possibly internal) and port -->
        <accept>jmx://localhost:2020/</accept>

        <!-- secure the management using a security realm -->
        <realm-name>demo</realm-name>

        <!-- configure the authorized user roles -->
        <auth-constraint>
            <require-role>ADMINISTRATOR</require-role>
        </auth-constraint>
    </management>


    <!--
    #############################################################################
    #############################################################################
                              Do not remove closing element
    #############################################################################
    #############################################################################
    -->

</gateway-config>
