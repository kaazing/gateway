#
# Copyright 2007-2016, Kaazing Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Autobahn test case 5.19

# Case Description
# A fragmented text message is sent in multiple frames. After sending the first 2 frames of the text message, a Ping is sent. 
# Then we wait 1s, then we send 2 more text fragments, another Ping and then the final text fragment. Everything is legal.

# Case Expectation
# The peer immediately answers the first Ping before it has received the last text message fragment. 
# The peer pong's back the Ping's payload exactly, and echo's the payload of the fragmented message back to us.

connect tcp://localhost:8555
connected

write "GET /echo HTTP/1.1\r\n"
write "User-Agent: AutobahnTestSuite/0.6.1-0.8.8\r\n"
write "Host: localhost:8555\r\n"
write "Upgrade: WebSocket\r\n"
write "Connection: Upgrade\r\n"
write "Pragma: no-cache\r\n"
write "Cache-Control: no-cache\r\n"
write "Sec-WebSocket-Key: M49hSe4U0YL0GWTRyxmK3w==\r\n"
write "Sec-WebSocket-Version: 13\r\n"
write "\r\n"

read "HTTP/1.1 101 Web Socket Protocol Handshake\r\n"
read "Connection: Upgrade\r\n"
read /Date: .*\r\n/
read "Sec-WebSocket-Accept: /qWfYcGeEnQQLJZuM5EVDeuajgI=\r\n"
read "Server: Kaazing Gateway\r\n"
read "Upgrade: WebSocket\r\n"
read "\r\n"

# Websocket text fragments
write [0x01 0x89 0x53 0xf2 0xa3 0xd5 0x35 0x80 0xc2 0xb2 0x3e 0x97 0xcd 0xa1 0x62]
write [0x00 0x89 0x7f 0x40 0x1a 0x75 0x19 0x32 0x7b 0x12 0x12 0x25 0x74 0x01 0x4d]

# read text fragment1, fragment2
read [0x01 0x09 0x66 0x72 0x61 0x67 0x6d 0x65 0x6e 0x74 0x31]
read [0x00 0x09 0x66 0x72 0x61 0x67 0x6d 0x65 0x6e 0x74 0x32]

# Websocket ping with payload
write [0x89 0x89 0x71 0x9c 0x8c 0x2b 0x01 0xf3 0xe2 0x4c 0x1c 0xf9 0xac 0x1a 0x50]

# Websocket pong with payload
read [0x8a 0x09 0x70 0x6f 0x6e 0x67 0x6d 0x65 0x20 0x31 0x21]

# Websocket text fragments continued
write [0x00 0x89 0x8b 0x7e 0xa0 0x0b 0xed 0x0c 0xc1 0x6c 0xe6 0x1b 0xce 0x7f 0xb8]
write [0x00 0x89 0x3e 0xc8 0x1f 0x7e 0x58 0xba 0x7e 0x19 0x53 0xad 0x71 0x0a 0x0a]

# read text fragment3, fragment4
read [0x00 0x09 0x66 0x72 0x61 0x67 0x6d 0x65 0x6e 0x74 0x33]
read [0x00 0x09 0x66 0x72 0x61 0x67 0x6d 0x65 0x6e 0x74 0x34]
 
# Websocket ping with payload
write [0x89 0x89 0x4f 0x01 0x2f 0xd8 0x3f 0x6e 0x41 0xbf 0x22 0x64 0x0f 0xea 0x6e]

# Websocket pong with payload
read [0x8a 0x09 0x70 0x6f 0x6e 0x67 0x6d 0x65 0x20 0x32 0x21]

# Websocket text continuation ends
write [0x80 0x89 0x92 0x95 0x5c 0xaf 0xf4 0xe7 0x3d 0xc8 0xff 0xf0 0x32 0xdb 0xa7]

# read text fragment5
read [0x80 0x09 0x66 0x72 0x61 0x67 0x6d 0x65 0x6e 0x74 0x35]

# Websocket close with normal closure
write [0x88 0x82 0xea 0x2a 0x11 0x63 0xe9 0xc2]
read [0x88 0x02 0x03 0xe8]

close
closed