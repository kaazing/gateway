#
# Copyright 2007-2016, Kaazing Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# javascript 4.0.4 client connection to proxy service
# ===================================================
connect tcp://127.0.0.1:8001
connected

# Connection request
write "GET /proxy?.kl=Y HTTP/1.1\r\n"
write "Upgrade: websocket\r\n"
write "Connection: Upgrade\r\n"
write "Host: localhost:8001\r\n"
write "Origin: http://localhost:8001\r\n"
write "Sec-WebSocket-Key: nDaimG37f4nUqogPypithw==\r\n"
write "Sec-WebSocket-Version: 13\r\n"
# Try with multiple extensions for good measure (and because they will be used together)
write "Sec-WebSocket-Extensions: x-kaazing-idle-timeout,x-kaazing-ping-pong\r\n"
write "\r\n"

# 101 Response 

read "HTTP/1.1 101 Web Socket Protocol Handshake\r\n"
read "Connection: Upgrade\r\n"
read /Date: .*\r\n/
read /Sec-WebSocket-Accept: .*\r\n/
# The 4 control bytes for ping-pong extension are 0x00000002:
read "Sec-WebSocket-Extensions: x-kaazing-idle-timeout; timeout=2000\r\n"
read "Sec-WebSocket-Extensions: x-kaazing-ping-pong; 01010102"
read "\r\n"
read "Server: Kaazing Gateway\r\n"
read "Upgrade: websocket\r\n"
read "\r\n"

# binary-encoded balancer directive - NO balance needed      
read [0x82 0x04 0xEF 0x83 0xBF 0x4E]

# Read initial extended PING
read [0x81 0x06 0x01 0x01 0x01 0x02 0x09 0x00]

# Send (masked) extended PONG response (unmasked form is [0x81 0x06 0x01 0x01 0x01 0x02 0x0a 0x00])
write [0x81 0x86 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x03 0x0b 0x01]

# If we send data more frequently than ws.inactivity.timeout/2 (1000 millis) we should get a PONG
# instead of a PING. We send a masked text message containing text "123" for more than 2000ms at 300ms apart (frequent enough)

write await SLEEP_ONE
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_TWO
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_THREE
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_FOUR
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_FIVE
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_SIX
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_SEVEN
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

write await SLEEP_EIGHT
write [0x81 0x83 0x01 0x01 0x01 0x01 0x30 0x33 0x32]

# Expect (extension) PONG
read [0x81 0x06 0x01 0x01 0x01 0x02 0x0a 0x00]


# Do clean close
write [0x88 0x80 0x01 0x01 0x01 0x01]
read [0x88 0x00]

close
closed

# Connection from back end of proxy service
# =========================================
accept tcp://127.0.0.1:8002
accepted
connected
# read 8 "abc" frames
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
read [0x31 0x32 0x33]
closed

# Connect to ServerSocket in test method to read period data to simulate SLEEP
# ============================================================================
connect tcp://localhost:61234
connected
read "WakeUp1"
read notify SLEEP_ONE
read "WakeUp2"
read notify SLEEP_TWO
read "WakeUp3"
read notify SLEEP_THREE
read "WakeUp4"
read notify SLEEP_FOUR
read "WakeUp5"
read notify SLEEP_FIVE
read "WakeUp6"
read notify SLEEP_SIX
read "WakeUp7"
read notify SLEEP_SEVEN
read "WakeUp8"
read notify SLEEP_EIGHT
close
closed